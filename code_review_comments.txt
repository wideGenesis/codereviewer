Changes in file:
 a/README.md b/README.md
new file mode 100644
index 0000000..a2bc630
--- /dev/null
+++ b/README.md
@

The README.md you've added is quite good and provides a solid overview of your CodeReviewer tool. Here are some suggestions for improvements:

1. **Add a License Section**: It's important to clarify the licensing of your code. Add a section that states under which license your project is released.

   ```markdown
   ## License
   This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
   ```

2. **Expand on Usage**: While you've included steps for usage, it would be helpful to provide an example of the command to run the tool and what the expected output might look like. This will help users understand how to use it effectively.

   ```markdown
   ## Usage
   ...
   2. **Run the CodeReviewer**: You can run the review process by using the following command:
   ```bash
   python codereviewer.py --repo path/to/your/repo --branch branch-name
   ```
   3. **Generate Report**: The tool will generate a detailed report with suggestions and comments based on the AI's analysis, outputting it to a file named `review_report.md`.
   ```

3. **Provide Contributing Guidelines**: If you're looking for contributions to your project, consider adding a section on how developers can contribute, along with coding standards or any specific requirements.

   ```markdown
   ## Contributing
   Contributions are welcome! Please read the [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests.
   ```

4. **Add a Contact or Support Section**: If users have questions or issues, they should know how to reach out for help or support.

   ```markdown
   ## Support
   For any questions, issues or feedback, please contact [support@example.com](mailto:support@example.com).
   ```

5. **Format Consistency**: Ensure that the code formatting is consistent throughout the file. For example, the code snippets should contain triple backticks, and indentation should be clear.

6. **Consider Adding Badges**: Including status badges (e.g., build status, license, version, etc.) at the top can improve the professionalism of your README and provide quick insights into the current state of the project.

   ```markdown
   ![Build Status](https://img.shields.io/badge/build-passing-brightgreen)
   ![License](https://img.shields.io/badge/license-MIT-blue.svg)
   ```

7. **Enhance the Installation Section**: It might be beneficial to specify if there are any prerequisites or dependencies outside of Python, especially if there are OS-specific instructions (e.g., for Windows or Linux).

For example:
   ```markdown
   ## Installation
   Ensure you have Python 3.8 or later and `pip` installed. 
   You can check your Python version with:
   ```bash
   python --version
   ```

Incorporating these suggestions should enhance the readability, usability, and professionalism of your README file.

Changes in file:
 a/app.py b/app.py
index 6f1093e..b9b834b 100644
--- a/app.py
+++ b/app.py
@@ -1,3 +0,0 @@
-from com

The code changes you've made seem to refactor some parts of the existing `app.py` module. Here are some suggestions and improvements that could enhance the clarity, maintainability, and overall quality of the code:

### 1. Organization of Imports
- **Sort imports**: It’s generally recommended to sort imports according to PEP 8 guidelines, which suggests grouping them into standard library imports, related third-party library imports, and local application/library imports. This will increase readability.

### 2. Constants
- **Consider using a configuration class or file**: If you're going to use many constants (like paths or API keys), consider encapsulating them in a configuration class or external configuration file (like a `.env` file) instead of hardcoding values directly in your script. This improves maintainability and allows for easier configuration changes.

### 3. Documentation
- **Use docstrings consistently**: You've added docstrings for the `run_local_code_reviewer` and `run_github_code_reviewer` functions, which is excellent. Make sure to consistently add docstrings to all functions, including `get_review_params`, to describe their purpose and input/output.

### 4. Magic Strings
- **Avoid magic strings**: The strings used (such as "gpt-4o-mini") could be defined as constants at the top, making it clear what they are for. This supports maintainability and reduces the risk of hardcoding errors.

```python
GPT_MODEL_NAME = "gpt-4o-mini"
```

### 5. Function Parameterization
- **Parameterize constants**: Consider allowing more flexibility in your functions by making parameters like `REPO_PATH`, `BRANCH_NAME`, etc., configurable via function arguments with default values instead of using hardcoded constants.

```python
def run_local_code_reviewer(repo_path=REPO_PATH, branch_name=BRANCH_NAME, output_file=OUTPUT_FILE_FOR_LOCAL):
```

### 6. Refactor Repeated Code
- **Avoid repetitive code calls**: Rather than passing the logger, completion_client, and other constants repeatedly, refactor them into a single call or class that manages the setup for your reviewing logic.

### 7. Error Handling
- **Add error handling**: Consider adding error handling for network calls or file reading/writing which might cause your reviewer to fail silently. Use try-except blocks to manage potential errors gracefully.

```python
try:
    local_code_reviewer(repo_path, branch_name, output_file, *get_review_params())
except Exception as e:
    logger.error(f"Error during local code review: {str(e)}")
```

### 8. Code Clarity
- **Improve inline comments**: While the inline comments in Russian help for clarity of intent, consider writing comments in English for teams that might not speak Russian. Alternatively, you could include comments in both languages.

### Suggested Refactor Example
Here’s how the refactored part might look based on the suggestions:

```python
import os
from common.az_logger.global_logger import CustomLogger
from git_hub.gh_client import git_hub_code_reviewer
from git_local.local_client import local_code_reviewer

# Logger and configuration
logger = CustomLogger(azure_connection_string=None, log_level_local="debug", log_level_azure="debug")

# Constants
REPO_PATH = "C:\\Users\\Genesis\\PycharmProjects\\codereviewer"
BRANCH_NAME = "rel_01"
OUTPUT_FILE_FOR_LOCAL = "code_review_comments.txt"
OUTPUT_FILE_FOR_GITHUB = "code_review_comments_from_github.txt"
REPO_NAME = 'wideGenesis/codereviewer'
MODEL_NAME = "gpt-4o-mini"

def get_review_params():
    return logger, completion_client, SYSTEM["code_review_assistant"], USER["code_review"], MODEL_NAME

def run_local_code_reviewer():
    """
    Executes local code review for the specified repository, branch, and output file.
    :return: None
    """
    try:
        local_code_reviewer(REPO_PATH, BRANCH_NAME, OUTPUT_FILE_FOR_LOCAL, *get_review_params())
    except Exception as e:
        logger.error(f"Error during local code review: {str(e)}")

def run_github_code_reviewer():
    """
    Executes GitHub code review for the specified repository.
    :return: None
    """
    try:
        git_hub_code_reviewer(REPO_NAME, OUTPUT_FILE_FOR_GITHUB, *get_review_params())
    except Exception as e:
        logger.error(f"Error during GitHub code review: {str(e)}")
```

By implementing these suggestions, your code will be more robust, clearer, and easier for others (or future you) to understand and maintain.

Changes in file:
 a/code_review_comments_from github.txt b/code_review_comments_from github.txt
new file mode 100644


The review comments you've presented are quite comprehensive and focus on various important aspects of Python coding best practices. Below are additional suggestions and improvements to further enhance your code and the review comments:

### Review Feedback

1. **Import Order and Cleanliness**:
    - In addition to organizing imports, consider using tools like `isort` to automate the sorting and formatting of import statements.

2. **Environment Variables Handling**:
    - In your logging message for the missing environment variable, consider incorporating a suggestion for how to set the variable (e.g., "Set OPENAI_API_KEY in your environment.") to be more helpful to users who might not know how to configure it.

3. **Magic Strings**:
    - If long paths or specific values cannot be externalized immediately, at least consider defining them at the top of the file and using them throughout the code to improve visibility and maintainability.
    - In Python, you might define them as:
      ```python
      REPO_PATH = "C:\\Users\\Genesis\\PycharmProjects\\codereviewer"
      DEFAULT_BRANCH = "rel_01"
      ```

4. **Docstrings**:
    - Consider including more detailed explanations or usage examples in the docstrings for complex functions.

5. **Code Maintainability**:
    - If there is repeated logic (e.g., logger initialization), you may want to wrap those processes in a helper function for better reusability and clarity.

6. **Function Naming**:
    - The naming of actions is crucial. Ensure consistency in your naming conventions (e.g., using either all verbs or all nouns) for clarity.

7. **Error Handling**:
    - Extend error handling to all critical operations, not just API key retrieval. For instance, check results from API calls and handle potential exceptions gracefully.

8. **Main Guard**:
    - The `if __name__ == '__main__':` block can be further modularized. You might consider separating command line parsing or different modes of operation for enhanced usability.

### Improvements to Code

Here's a modified version of the updated code with some of these suggestions implemented:

```python
import logging
import os
from common.az_logger.global_logger import CustomLogger
from git_hub.gh_client import git_hub_code_reviewer
from git_local.local_client import local_code_reviewer
from openai import OpenAI
from open_ai.prompt.llm_prompt import SYSTEM, USER

# Initialize the logger
AZURE_LOGGER_NAMES = ['azure.core.pipeline.policies.http_logging_policy', 'azure.storage']
for logger_name in AZURE_LOGGER_NAMES:
    logging.getLogger(logger_name).setLevel(logging.WARNING)

# Constants (consider externalizing)
REPO_PATH = "C:\\Users\\Genesis\\PycharmProjects\\codereviewer"
BRANCH_NAME = "rel_01"
OUTPUT_FILE = "code_review_comments.txt"
REPO_NAME = 'wideGenesis/codereviewer'
MODEL_NAME = "gpt-4o-mini"

REVIEW_ASSISTANT = SYSTEM["code_review_assistant"]
USER_PROMPT = USER["code_review"]

# Logger Setup
logger = CustomLogger(azure_connection_string=None, log_level_local="debug", log_level_azure="debug")

# OpenAI Client Initialization
api_key = os.getenv("OPENAI_API_KEY")
if api_key is None:
    logger.error("OPENAI_API_KEY is not set. Please set it in your environment.")
else:
    try:
        completion_client = OpenAI(api_key=api_key)
    except Exception as e:
        logger.error(f"Failed to initialize OpenAI client: {e}")
        raise

def get_review_params():
    return logger, completion_client, REVIEW_ASSISTANT, USER_PROMPT, MODEL_NAME

def run_local_code_reviewer() -> None:
    """Executes a local code review for the specified repository, branch, and output file."""
    local_code_reviewer(REPO_PATH, BRANCH_NAME, OUTPUT_FILE, *get_review_params())

def run_github_code_reviewer() -> None:
    """Executes GitHub code review for the specified repository."""
    git_hub_code_reviewer(REPO_NAME, *get_review_params())

def main():
    """Main function to run code reviewers"""
    run_local_code_reviewer()
    run_github_code_reviewer()

if __name__ == '__main__':
    main()
```

### Summary
Overall, your code changes show clear improvements and thoughtfulness. The additional suggestions encourage better practices, enhance code quality, and provide improved clarity for future developers working on this codebase. Emphasizing error handling, modularization, and constants management will contribute to a maintainable and robust codebase.

Changes in file:
 a/git_hub/gh_client.py b/git_hub/gh_client.py
index c43ddc5..0da520a 100644
--- a/git_hub/gh_client

The code changes you've made introduce new functionality for extracting Python file changes from pull requests and formatting these changes for reviewing using an LLM (Large Language Model). Here are several suggestions and improvements you could consider:

### 1. Code Organization
- **Modular Functions:** It would be beneficial to break up larger functions into smaller, single-responsibility functions. This not only improves readability but makes unit testing easier.
  
- **Type Hinting:** You have improved type hinting, which is great. Ensure that all public-facing functions have clear and complete type hints for better code clarity.

### 2. Documentation and Comments
- **Function Documentation:** Ensure that all functions have docstrings explaining their purpose, parameters, and return types. While you have done this for the new functions, existing functions should also be reviewed for similar documentation.

- **Code Comments:** Remove commented-out code unless it serves a purpose or adds context. Instead, refer to version control (git) history for changes that may have been commented out.

### 3. Error Handling
- **Specific Exceptions:** Instead of catching all exceptions in `save_review_comments`, consider catching only specific exceptions (like `IOError` for file operations). This prevents masking other errors unintentionally.

- **Graceful Exit:** Rather than using `exit(1)`, consider raising an appropriate exception. This allows for better control of the program's flow, especially if the function can be part of a larger program or library.

### 4. Use of `logging`
- **Log Messages:** Make sure your log messages provide enough context. In the case of logging errors, also include relevant information (like the `pr_number`, `repo_name`, etc.).

### 5. Performance Considerations
- **String Concatenation:** When concatenating strings in Python, using `str.join` is generally more efficient than using `+=` repeatedly, especially in loops. For example:

    ```python
    all_comments_parts = []
    for file_data in python_files:
        ...
        all_comments_parts.append(f"### Review for {filename}:\n\n{file_comments}\n\n")
    
    all_comments = ''.join(all_comments_parts)
    ```

### 6. Additional Improvements
- **Consistent Naming Conventions:** Ensure that variable names are consistently styled (e.g., `snake_case` for variables). It looks like you've generally done this well, but check for any inconsistencies.

- **Use of Constants:** If you have repeated strings like the section header format (e.g., "### Review for {filename}"), consider defining them as constants to avoid duplication and potential errors.

### 7. Unit Tests
- **Testing**: If you haven't already, consider writing unit tests for your new functions. Specifically, test `extract_python_files_from_commit` and `format_changes_for_llm` functions to assert that they produce expected outputs based on input scenarios.

### Final Thoughts
These changes generally enhance the clarity, maintainability, and robustness of your code. Implementing these suggestions will not only improve the code's functional quality but also facilitate easier debugging and future enhancements. Keep up the good work!

Changes in file:
 a/git_local/local_client.py b/git_local/local_client.py
index e9d8e01..43feef0 100644
--- a/git_loc

The code changes you provided show a refactor of a function related to checking the existence of a branch in a Git repository and getting a Git diff. Here are some suggestions for improvements and best practices:

1. **Function Name and Parameter Documentation**:
   - It’s a good practice to add type hints to the function parameters and return types. For `check_branch_exists`, you could define the types for `repository` and `branch_name`.
   - Consider adding a docstring for the `get_git_diff` function as it was removed, which is important for understanding the method's purpose and usage.

   Example:
   ```python
   def check_branch_exists(repository: git.Repo, branch_name: str) -> None:
       """Checks if the specified branch exists in the repository."""
   ```

2. **Error Handling**:
   - Instead of raising a generic `ValueError`, you may want to create a custom exception for Git-related errors. This can help distinguish between different types of errors in larger applications.

   Example:
   ```python
   class GitBranchError(Exception):
       pass

   def check_branch_exists(repository: git.Repo, branch_name: str) -> None:
       """Checks if the specified branch exists in the repository."""
       if branch_name not in repository.branches:
           raise GitBranchError(f"Branch {branch_name} not found in the repository")
   ```

3. **Constant Naming**:
   - The constant `MAIN_BRANCH` is clearly named, but if you are using more constants related to Git operations, consider using an enum or a dedicated configuration class to manage these values.

4. **Logging**:
   - If certain operations such as branch checkout or diff retrieval fail, it might be useful to log those events. This can be done using the provided `logger`.

   Example:
   ```python
   logger.info(f"Switching to branch: {branch_name}")
   repository.git.checkout(branch_name)
   ```

5. **Removing Unused Imports**:
   - Since you removed the imports for `Union`, `OpenAI`, and `AsyncOpenAI`, make sure there are no leftover references to these libraries in the rest of your code. If they are genuinely unused, they can be deleted.

6. **Simplification**:
   - While narrowing down the check for branch existence into its own function is great for readability, consider using GitPython's built-in methods to streamline the branch validation further.

7. **Conditions for Diff Return**:
   - Instead of checking for non-null differences after fetching the diff, consider handling cases where there might not be any differences in a clearer manner, such as returning an empty string or a specific message.

8. **Consider Utilizing `with` Statement for Git Repo**:
   - If `git.Repo` can be used in a context manager, this would ensure that resources are properly released after use.

Here’s how a refactored piece of your code might look after applying some of these suggestions:

```python
import git
import logging

MAIN_BRANCH = 'main'

class GitBranchError(Exception):
    pass

def check_branch_exists(repository: git.Repo, branch_name: str) -> None:
    """Checks if the specified branch exists in the repository."""
    if branch_name not in repository.branches:
        raise GitBranchError(f"Branch {branch_name} not found in the repository")

def get_git_diff(repo_path: str, branch_name: str, logger: logging.Logger) -> str:
    """Fetches the git diff between the specified branch and the main branch."""
    repository = git.Repo(repo_path)
    check_branch_exists(repository, branch_name)
    
    logger.info(f"Switching to branch: {branch_name}")
    repository.git.checkout(branch_name)
    
    differences = repository.git.diff(MAIN_BRANCH, branch_name, unified=0)
    return differences

# Further code...
```

By applying these suggestions, you can enhance the readability, maintainability, and robustness of your code.

Changes in file:
'):
-        if file_diff.strip():  # Èãíîðèðóåì ïóñòûå ñòðîêè
+    for file_difference in differenc

It looks like you are making a change to a code block related to processing file differences. Here's a review of the provided change along with suggestions for improvements:

### Code Review

1. **Change Context**: It appears that the original code checks if `file_diff` is not empty or only whitespace. The new line intends to start looping through entries in `differences`.

2. **Variable Naming**: The variable name `file_difference` is clear and descriptive, which is a good practice. Ensure that the context in which it is used remains clear.

3. **Splitting Mechanism**: The new code suggests using `differences.split()`. However, it looks like the split is incomplete. You will likely want to specify a separator if it’s not the default whitespace.

### Suggestions for Improvement

1. **Complete Split Expression**:
   - Ensure that the `split` method has an appropriate separator. If the intention is to split on a specific delimiter (like new lines), specify it. e.g., `differences.split('\n')`.

   ```python
   for file_difference in differences.split('\n'):
   ```

2. **Trim Whitespaces**: If you want to keep ignoring empty lines or lines that only contain whitespace, consider trimming whitespace from each `file_difference` within the loop.

   ```python
   for file_difference in differences.split('\n'):
       if file_difference.strip():  # Ignoring empty lines
           # Process file_difference here
   ```

3. **Documentation**: If this code is part of a larger function or method, consider adding a docstring above the function explaining what `differences` should contain and how to use the loop. This provides clarity for future developers.

4. **Error Handling**: Depending on how `differences` is constructed, consider adding error handling around it to manage cases where it might not be a string or is `None`.

   ```python
   if differences is not None and isinstance(differences, str):
       for file_difference in differences.split('\n'):
           if file_difference.strip():  # Ignoring empty lines
               # Process file_difference here
   else:
       raise ValueError("The 'differences' parameter should be a non-empty string.")
   ```

5. **Commenting**: Instead of leaving comments in a different language (e.g., Russian), use comments in English to ensure that the code is accessible to a wider audience.

   ```python
   # Ignore empty lines
   ```

### Final Suggested Code

Here is a revised version incorporating the suggested changes:

```python
# Assuming `differences` is a string containing file differences
if differences is not None and isinstance(differences, str):
    for file_difference in differences.split('\n'):
        if file_difference.strip():  # Ignore empty lines
            # Process file_difference here
else:
    raise ValueError("The 'differences' parameter should be a non-empty string.")
```

This updated code should maintain functionality while improving readability and robustness.

Changes in file:
'):
+        if file_difference.strip():
@@ -91 +81 @@ def local_code_reviewer(
-                use

Your code changes seem to involve renaming a variable from `file_diff` to `file_difference`, as well as adjusting its usage in different parts of the code. Here are some suggestions and improvements to enhance clarity, maintainability, and functionality:

1. **Consistent Naming**: It's good that you renamed `file_diff` to `file_difference` for clarity. Ensure that all places in your code where `file_diff` was used have been updated accordingly. Consistent and clear naming enhances readability.

2. **Strip Empty Lines Check**: In the check `if file_difference.strip():`, ensure there is a clear indication of why empty lines or whitespace are not considered significant. Adding a comment can help others understand the purpose of this check.

3. **Comment Clarity**: The comment `# Ñîõðàíÿåì êîììåíòàðèè â ôàéë` (meaning "Saving comments to file" in Russian) is left in the diff. If the context of this comment is not evident from the surrounding code, consider adding further details or translating it to English, depending on the target audience of the codebase. For example: 
   ```python
   # Save the generated comments to a file for later review
   ```

4. **Handling Long Differences**: In the line:
   ```python
   comments += f"Changes in file:\n{file_difference[:100]}\n\n{file_comments}\n\n"
   ```
   You're currently limiting the number of characters displayed to 100. If your intention is to provide a preview and the file difference can be fairly long, you might consider providing a mechanism to view more lines, such as a link to expand the entire difference, or even a configurable limit for the number of displayed lines.

5. **Exception Handling**: Depending on how this function is used, you might want to add exception handling around potential areas of failure—such as file reading or formatting issues. It would improve robustness.

6. **Unit Tests**: If you haven't already covered the modifications with unit tests, consider writing tests to check the output of your function with various inputs (e.g., input with no differences, input with long differences, etc.). This ensures your changes function as expected.

7. **Performance Considerations**: If `file_difference` can be very large, you might want to assess the potential performance implications of slicing it with `[:100]`. While it’s typically not an issue for most cases, it’s good to be mindful of performance, especially if the function is called often or with large data.

Here’s a revised version of your code snippet with some of these suggestions applied:

```python
if file_difference.strip():  # Check if there are actual differences to review
    comments += f"Changes in file:\n{file_difference[:100]}\n\n{file_comments}\n\n"  # Preview the first 100 characters
```

If the context allows it, adding more details to comments and ensuring comprehensive testing is key for maintaining code quality.

Changes in file:
 a/open_ai/prompt/llm_prompt.py b/open_ai/prompt/llm_prompt.py
index 29511d0..0632eee 100644
--- a/o

The revised code you've shared enhances a prompt configuration for a Python Senior Developer and Solution Architect, focusing on conducting code reviews. There are several improvements made, but there are also areas that could benefit from further refinement. Below are suggestions to enhance clarity, conciseness, and effectiveness of the code changes.

### Suggestions for Improvements:

1. **Conciseness and Clarity**:
   - The prompt is quite long, and while detail is important, the guidelines can be summarized to improve clarity. Consider bullet points for key sections to make it more digestible.
   - For example, instead of listing every library with versions, consider focusing on their purpose and usage contexts, and perhaps providing only version ranges if necessary.

2. **Headings and Structure**:
   - Utilize markdown headings (`#####`) consistently to create a clear hierarchy of information. This can improve readability by establishing a clear flow of information.
   - Consider focusing sections on broader topics (e.g., "Performance Optimization Techniques", "Best Practices in Class Design", etc.).

3. **Avoid Repetition**:
   - Some points within the guidelines may overlap (e.g., using built-in functions and data structures). Consolidate these points wherever applicable.
   - For example, merging "Code Structure & Class Design" with "Performance Optimization" could enhance cohesion.

4. **Specific Tools and Recommendations**:
   - Instead of listing tools and libraries within their usage contexts, highlight common patterns or practices for integrating these tools. This emphasizes reasoning over memorization.
   - Consider adding a brief rationale for why certain libraries (like FastAPI or Redis) are favored over alternatives, to provide more context.

5. **Error Handling**:
   - The "Error Handling" section could detail best practices for specific exceptions. Misuse of exceptions can lead to silent failures; expanding on this will provide clearer guidance.
   - Include examples of common scenarios where proper error handling is crucial.

6. **Asynchronous Operations**:
   - While you mention using asynchronous libraries, elaborating on the scenarios where they shine versus synchronous counterparts would provide further clarity.
   - Consider detailing the trade-offs involved in choosing asynchronous programming, particularly in terms of complexity.

7. **Testing Best Practices**:
   - Expand on unit testing and integration testing by including examples of what constitutes good test coverage and the importance of edge cases.
   - Mention specific testing strategies or patterns (e.g., Arrange-Act-Assert), which can further guide best practices.

8. **Coding Style Enforcement**:
   - Recommend the use of tools like `Black` for code formatting and `linters` for style checks to enforce coding standards automatically, which aligns with best practices.

9. **Versioning & Compatibility**:
   - Instead of specifying versions for multiple libraries, recommend the use of a requirements file and guide users on how to check for compatibility for their specific environment.

10. **Documentation Standards**:
    - Include examples of well-structured docstrings and documentation to set a standard for how functions and classes should be documented.

### Refactored Example Section:

Here's an example of how you might rephrase a portion of your prompt:

```markdown
#### General Guidelines:
- **Python Version**: Code must be optimized for Python >= 3.12. 
- **Core Libraries**: Use built-in libraries (e.g., `itertools`, `functools`) preferentially. Avoid unnecessary dependencies.
- **Asynchronous Programming**: Employ async libraries (`aiohttp`, `asyncio`, etc.) for I/O-bound tasks.

#### Code Optimization Techniques:
- **Efficient Data Structures**: Use collections appropriately; prefer `set`/`dict` for fast lookups.
- **Built-in Functions**: Utilize functions like `sum()`, `map()`, and comprehensions for concise and efficient code.
- **Caching Mechanisms**: Implement `functools.lru_cache` for costly function calls.

#### Testing Best Practices:
- **Coverage**: Employ `pytest` to ensure comprehensive test coverage and validate key functionalities.
- **Structure**: Follow the Arrange-Act-Assert pattern to maintain clarity in test cases.
```

This example provides clarity, maintains key information, and organizes the content in a more user-friendly format.

### Conclusion:
Overall, your code changes provide a robust foundation for conducting code reviews with a focus on optimization and best practices. By incorporating these suggestions, you can further enhance the clarity, usability, and effectiveness of your guidelines.

